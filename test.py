from SpeechLib import Sound_Clip, speech_recon_utils
import numpy as np
from PattRecClasses import DiscreteD, GaussD, HMM, MarkovChain, GMM
import os
import matplotlib.pyplot as plt
import threading
import scipy.stats

train_dir = './Sounds/train/2/'
zero_max_dim = 66

for subdirs, dir, files in os.walk(train_dir):
  obs = np.zeros(shape=(3000, 13, zero_max_dim))# len(files)
  counter = 0
  for file in files:
    temp = Sound_Clip(train_dir+file)
    temp = temp.mfcc(nceps=13,wintime=0.03, overlap=0.5, winfunc=np.hanning, lowfreq=0,highfreq=4000, nbands=30)
    temp = speech_recon_utils.CVMN(temp)
    if temp.shape[0] < zero_max_dim:
        temp = np.append(temp, np.tile(temp[-1,:],(zero_max_dim-temp.shape[0],1)), axis=0)
    
    obs[counter, :, :] = temp.T
    counter = counter + 1
    if counter == 3000:
        break

q0 = np.array([1,0,0,0,0])
q1 = np.array([1,0,0,0,0])
q2 = np.array([1,0,0])

A0 = np.array([[9.82649119e-01 ,1.73508813e-02, 0.00000000e+00 ,0.00000000e+00,
  0.00000000e+00, 0.00000000e+00],
 [0.00000000e+00, 3.37030164e-01 ,6.62969836e-01, 0.00000000e+00,
  0.00000000e+00, 0.00000000e+00],
 [0.00000000e+00, 0.00000000e+00, 5.16500135e-01, 4.83499865e-01,
  0.00000000e+00, 0.00000000e+00],
 [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 7.01612619e-01,
  2.98387381e-01 ,0.00000000e+00],
 [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
  9.99999519e-01 ,4.80558482e-07]])
A1 = np.array([[2.95451049e-01,7.04548951e-01,0.00000000e+00,0.00000000e+00,  0.00000000e+00, 0.00000000e+00],
 [0.00000000e+00,8.06884553e-01, 1.93115447e-01 ,0.00000000e+00,
  0.00000000e+00, 0.00000000e+00],
 [0.00000000e+00, 0.00000000e+00, 6.94253304e-01, 3.05746696e-01,
  0.00000000e+00, 0.00000000e+00],
 [0.00000000e+00, 0.00000000e+00, 0.00000000e+00 ,4.23123268e-01,
  5.76876732e-01, 0.00000000e+00],
 [0.00000000e+00, 0.00000000e+00 ,0.00000000e+00, 0.00000000e+00,
  9.99999992e-01 ,8.33199143e-09]])
A2 = np.array([[2.35969607e-01, 7.64030393e-01, 0.00000000e+00, 0.00000000e+00],
 [0.00000000e+00, 3.99387532e-01, 6.00612468e-01, 0.00000000e+00],
 [0.00000000e+00, 0.00000000e+00, 9.99999995e-01, 4.68925611e-09]])

weights0 = np.array([[0.02499158, 0.02864529, 0.26381384, 0.0704998 , 0.00500422, 0.10897259
 , 0.01016505, 0.00952526, 0.06105017, 0.00960122, 0.04156275, 0.08348925
 , 0.28267898],
 [0.03433431, 0.03603251, 0.12499252, 0.05936033, 0.00691964, 0.0764244
 , 0.00683397, 0.00768043, 0.05973684, 0.01024653, 0.03948904, 0.24131168
 , 0.29663782],
 [0.02887312, 0.04069684, 0.14495776, 0.04885799, 0.00665666, 0.05268206
 , 0.00572125, 0.00570297, 0.05302562, 0.01081859, 0.03269574, 0.30774918
 , 0.26156223],
 [0.04347304, 0.03260614, 0.19629144, 0.07663873, 0.00579902, 0.06020408
 , 0.00715375, 0.00475774, 0.05522005, 0.00667668, 0.0249097 , 0.27867106
 , 0.20759859],
 [0.04204133, 0.0267894 , 0.30012992, 0.04645135, 0.00842431, 0.09676041
 , 0.00643714, 0.00197862, 0.00491517, 0.00980481, 0.02771546, 0.19521408
 , 0.23333798]])

weights1 = np.array([[2.57812292e-02,6.83449316e-02,3.72261531e-02,4.86242688e-02
,2.91306641e-03,3.71126979e-02,8.30357351e-02,2.55242480e-02
,6.20096834e-02,1.65772523e-01,1.17133067e-01,8.19634941e-02
,2.44558902e-01]
,[1.54177214e-03,4.05604558e-02,3.99272448e-02,9.05717335e-02
,8.78537289e-03,9.73592992e-02,1.52711002e-01,3.37234594e-02
,6.39681889e-02,8.60174454e-02,4.38056749e-02,8.93837541e-02
,2.51644597e-01]
,[1.97080156e-04,6.77977932e-04,4.07035634e-02,2.22772381e-02
,4.09312618e-03,1.17831155e-01,4.08695615e-01,6.59075188e-03
,4.89985178e-02,4.97041686e-02,7.36370684e-02,5.96797737e-02
,1.66913964e-01]
,[5.26270536e-05,4.71025093e-03,1.22064818e-03,4.19247674e-03
,4.10356230e-03,1.29397054e-01,3.95332477e-01,2.66192519e-04
,3.76691005e-02,6.78312109e-02,8.49984868e-02,7.88827969e-02
,1.91343115e-01]
,[2.22237663e-02,2.58441343e-01,2.20335957e-02,6.09205414e-02
,2.26587293e-03,1.49357575e-01,1.86652436e-01,1.79349616e-02
,1.73581667e-02,1.39568040e-01,1.85520500e-02,2.68231769e-02
,7.78684755e-02]])

weights2=np.array([[0.00444813, 0.01320339, 0.01284036, 0.00643763, 0.04079991, 0.02438919
 , 0.06125998, 0.03407178, 0.00581278, 0.01605276, 0.51264781, 0.14473143
 , 0.12330485],
 [0.00135435, 0.04111627, 0.00327365, 0.00964861, 0.07909559, 0.02661465
 , 0.08295832, 0.04101898, 0.01525332, 0.02289255, 0.37183535, 0.17445367
 , 0.13048469],
 [0.00424963, 0.09706933, 0.00090845, 0.01356249, 0.21860622, 0.06308567
 , 0.11840287, 0.04416328, 0.00685803, 0.0575241 , 0.24006688, 0.05581178,
  0.07969125]])


means0 = np.array([[-0.38115456, -0.04874544, -0.1435925,  -0.08998158,  0.26127259,  0.24429765,
   0.17843694,  0.24745863, -0.03921348, -0.09173688,  0.10103512,  0.00401375,
   0.0862362 ],
 [-1.27459871, -0.19163411, -0.37217795, -0.17430852,  1.19934236,  1.03859383,
   0.41309537,  1.30451374, -0.1134511,  -0.57228718,  0.39786752,  0.18280385,
   0.06600577],
 [-1.27125834, -0.19199235, -0.40022633, -0.16291001,  1.1680878,   1.02692082,
   0.39052795,  1.30205801, -0.13904773, -0.6477532,   0.38716833,  0.19223981,
   0.06871269],
 [-1.25751952, -0.18696617, -0.43646997, -0.161113,    1.1621683,   0.99347992,
   0.38823712,  1.29738755, -0.15247931, -0.71605725,  0.45332275,  0.2125767,
  -0.02506157],
 [-1.28202452, -0.18616131, -0.45062444, -0.15527827,  1.25394852,  1.07639309,
   0.3739146,   1.32295037, -0.15755162, -0.7447478,   0.48025609,  0.22604274,
  -0.03354574]])
means1 = np.array([[-1.42682329, -0.86212196,0.16443733, -0.03058341,1.05188445,1.26580255
, 1.22426652,0.18539855, -0.05855757,0.75490338,0.37034253,0.57569643
, 0.26085375],
 [-0.73374056, -1.20251212, -0.29398426,0.0816198, 0.84555431,0.30532725
, 0.7687927, 0.63283003, -0.22636368,0.01594979,0.46191366,0.70931871
, 0.18253175],
 [-0.79911439 ,-1.19603974 ,-0.39416695,0.27239412,0.75824182, -0.01172853
, 0.65958653,0.59737558 ,-0.20540028,0.0056172, 0.48258537,0.73751175
, 0.16678031],
 [-0.75799779 ,-1.2235261,-0.60550555,0.71122845,0.93557974, -0.06243449
, 0.05358027,0.86207209 ,-0.17069741, -0.00267277,0.52307026,0.80022921
, 0.13375561],
 [-0.75832927 ,-1.20355912, -0.60300527,0.86330401,0.93679626 ,-0.08368142
,-0.02038071,0.84723975, -0.23828062, -0.03965872,0.56385602,0.81565514
, 0.34626653]])
means2 = np.array([[-1.5383883,-0.39024667, -0.10506874, -0.47820958,0.73197007,0.91009135
, 1.04844854,0.88211486,0.53026638,1.00180272 ,-0.31523364,0.15092197
, 0.17133204],
 [-0.78461553, -0.16497561, -1.47460935, -0.64647802,0.07117811,0.68828195
, 0.50078479,1.02125601, -0.25654853,0.38908809,0.14661816,0.38408503
, 0.09969501],
 [-0.77739691, -0.12066182, -1.54738657, -0.63705083,0.12055199,0.69646177
, 0.41524262,1.01986246, -0.33360046,0.11514178,0.15071528,0.4484298
,-0.01424743]])


cov0 = np.array([[2.82334078e+02, 2.22910997e+02, 1.99239362e+02, 1.60462832e+02,
  2.28000574e+02, 2.63100530e+02, 1.54021564e+02, 2.55559174e+02,
  1.05818893e+02, 1.34906075e+02, 9.91324029e+01, 3.50605313e+01,
  1.06484861e+02],
 [1.41062265e-02, 8.12559894e-03, 2.58867237e-02, 4.30342797e-03,
  3.96092767e-02, 1.10252384e-02, 9.85178490e-03, 1.48367988e-02,
  3.06402830e-02, 3.00026971e-01, 6.21345420e-02, 4.32914998e-02,
  8.94095355e-02],
 [9.72766886e-03, 6.84459337e-03, 1.55805489e-02, 1.50809602e-03,
  1.12345025e-01, 1.56083768e-02, 2.57615749e-03, 8.87979815e-03,
  1.19760078e-02, 1.44691880e-01, 8.65725395e-02, 4.31970654e-02,
  1.10541178e-01],
 [2.55884282e-02, 3.15462190e-03, 1.82751683e-03, 1.67769732e-03,
  1.76878677e-01, 7.78673648e-02, 3.05724852e-03, 8.26667359e-03,
  6.66608648e-03, 1.63171905e-02, 8.32935422e-03, 1.01711957e-02,
  1.61276057e-03],
 [7.87442823e-07, 2.12231993e-05, 3.91053413e-04, 2.71801593e-07,
  2.03489386e-04, 3.78927183e-05, 2.10832382e-05, 2.45167985e-05,
  1.05909848e-04, 1.36938894e-04, 4.20268745e-05, 1.31090640e-04,
  3.60542320e-04]])
cov1 = np.array([[1.02822328e-01, 1.06886003e-01, 4.68864822e-01, 3.80345922e-02,
  6.54890437e-01, 6.49091135e-02, 4.16846129e-02, 1.55194593e-01,
  8.09069226e-01, 3.66844827e-01, 4.11033801e-01, 6.07998382e-01,
  1.49236891e-01],
 [3.40647385e-01, 7.08276220e-01, 1.27171565e+01, 3.11575653e+00,
  3.63319423e+01, 1.63212546e+01, 3.22978919e+00, 2.32608791e+01,
  2.04861513e+01, 5.78635087e+00, 3.76013650e+00, 2.29181419e+01,
  9.07132937e+00],
 [5.96613058e-02, 7.19990854e-03, 4.19887489e+00, 9.65528028e-01,
  1.83526750e+01, 7.26166471e+00, 5.45025603e+00, 2.79720027e+00,
  1.31981802e+01, 1.37658955e+00, 1.10446603e+01, 2.21312811e+01,
  2.86797374e+00],
 [1.10959472e-03, 3.06288840e-03, 1.59148823e-01, 1.49964288e-01,
  7.49048276e+00, 2.01133959e+00, 4.01407014e+00, 1.53759459e-01,
  5.15371304e+00, 1.68051469e+00, 1.10964543e+01, 2.55359334e+01,
  5.09139639e+00],
 [4.69186219e+00, 1.00478533e+01, 1.01952922e+01, 4.18104671e+01,
  1.31170239e+02, 1.83004556e+01, 4.09179464e+01, 3.38189473e+01,
  4.30812814e+01, 2.86782841e+01, 6.53751449e+01, 4.92737586e+01,
  3.98897371e+01]])
cov2 = np.array(
[[3.85160763e-02, 2.17981589e-03, 1.96045941e-01, 1.07341453e-02,
  5.43981364e-03, 6.85032689e-03, 7.13441461e-03, 2.23002577e-02,
  1.62100847e-02, 6.46843387e-03, 3.93707733e-01, 1.00615315e-01,
  8.66152540e-02],
 [1.74747934e+00, 2.19019441e-01, 4.13218789e+01, 5.66408308e-01,
  1.53100092e+00, 2.16748626e-01, 1.77309598e+00, 2.37594390e-01,
  1.09958547e+01, 1.28529706e+00, 3.61596469e+00, 2.10711196e+00,
  2.58258364e-01],
 [1.86502285e+01, 4.44888924e+01, 1.92553001e+02, 5.30217201e+01,
  5.39454260e+01, 2.68164981e+01, 7.68516213e+01, 5.05114144e+01,
  6.36793350e+01, 1.19677354e+02, 1.94229938e+01, 6.63529677e+01,
  5.94850669e+01]])

mc0 = MarkovChain(q0,A0)
mc1= MarkovChain(q1,A1)
mc2 = MarkovChain(q2,A2)
B0 = np.array([GMM(means0[i],cov0[i],weights0[i]) for i in np.arange(weights0.shape[0])])
B1 = np.array([GMM(means1[i],cov1[i],weights1[i]) for i in np.arange(weights1.shape[0])])
B2 = np.array([GMM(means2[i],cov2[i],weights2[i]) for i in np.arange(weights2.shape[0])])
hmm0 = HMM(mc0, B0)
hmm1 = HMM(mc1, B1)
hmm2 = HMM(mc2, B2)


correct = 0
incorrect = 0
for i in obs:
	test0 = hmm0.classifier(i)
	test1 = hmm1.classifier(i)
	test2 = hmm2.classifier(i)
	res  = np.argmax([test0,test1,test2])
	if res == 2:
		correct = correct +1 
	else:
		incorrect = incorrect + 1
# [49.266666666666666, 50.733333333333334] zero's accuracy
# [62.43333333333333, 37.56666666666667] one's accuracy
# [0.03333333333333333, 99.96666666666667] two's accuracy
print([correct*100/(correct+incorrect) , incorrect*100/(correct+incorrect)] )
